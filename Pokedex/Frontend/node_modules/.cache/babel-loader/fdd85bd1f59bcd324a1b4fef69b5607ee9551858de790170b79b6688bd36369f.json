{"ast":null,"code":"const [pokemons, setPokemons] = useState([]);\nconst [error, setError] = useState('');\nconst PokemonAPI = () => {\n  const findAllPokemon = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/v1/pokemons');\n      if (!response.ok) {\n        throw new Error(`Error! status: ${response.status}`);\n      }\n      const pokemons = await response.json();\n      setPokemons(pokemons);\n    } catch (e) {\n      error = e.message;\n      setError(error);\n    }\n  };\n};\n_c = PokemonAPI;\nvar _c;\n$RefreshReg$(_c, \"PokemonAPI\");","map":{"version":3,"names":["pokemons","setPokemons","useState","error","setError","PokemonAPI","findAllPokemon","response","fetch","ok","Error","status","json","e","message","_c","$RefreshReg$"],"sources":["/Users/luca/IdeaProjects/Pokedex/Frontend/pokedex-app/src/components/APIs/PokemonAPI.js"],"sourcesContent":["const [pokemons, setPokemons] = useState([]);\nconst [error, setError] = useState('');\n\nconst PokemonAPI = () => {\n  const findAllPokemon = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/v1/pokemons');\n      if (!response.ok) {\n        throw new Error(`Error! status: ${response.status}`);\n      }\n      const pokemons = await response.json();\n      setPokemons(pokemons);\n    } catch (e) {\n      error = e.message;\n      setError(error);\n    }\n  };\n};\n"],"mappings":"AAAA,MAAM,CAACA,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;AAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;AAEtC,MAAMG,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;MACrE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,kBAAiBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MACtD;MACA,MAAMX,QAAQ,GAAG,MAAMO,QAAQ,CAACK,IAAI,EAAE;MACtCX,WAAW,CAACD,QAAQ,CAAC;IACvB,CAAC,CAAC,OAAOa,CAAC,EAAE;MACVV,KAAK,GAAGU,CAAC,CAACC,OAAO;MACjBV,QAAQ,CAACD,KAAK,CAAC;IACjB;EACF,CAAC;AACH,CAAC;AAACY,EAAA,GAdIV,UAAU;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}