{"ast":null,"code":"export const createTeam = async team => {\n  try {\n    const response = await fetch('http://localhost:8080/api/v1/teams', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(team)\n    });\n    console.log(response);\n  } catch (e) {\n    alert(e.message);\n  }\n};\nexport const findAllTeams = async () => {\n  try {\n    const response = await fetch('http://localhost:8080/api/v1/teams');\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n    const teams = await response.json();\n    setTeams(teams);\n  } catch (e) {\n    alert(e.message);\n  }\n};\nexport const updateTeam = async team => {\n  try {\n    const response = await fetch(`http://localhost:8080/api/v1/teams/${team.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(team)\n    });\n    console.log(response);\n  } catch (e) {\n    alert(e.message);\n  }\n};\nexport const deleteTeamById = async teamId => {\n  try {\n    const response = await fetch(`http://localhost:8080/api/v1/teams/${teamId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n    const newTeams = teams.filter(t => t.id !== teamId);\n    setTeams(newTeams);\n  } catch (e) {\n    alert(e.message);\n  }\n};\nexport const deleteAllTeams = async () => {\n  try {\n    const response = await fetch(`http://localhost:8080/api/v1/teams`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n    const newTeams = [];\n    setTeams(newTeams);\n  } catch (error) {\n    alert(e.message);\n  }\n};","map":{"version":3,"names":["createTeam","team","response","fetch","method","headers","body","JSON","stringify","console","log","e","alert","message","findAllTeams","ok","Error","status","teams","json","setTeams","updateTeam","id","deleteTeamById","teamId","newTeams","filter","t","deleteAllTeams","error"],"sources":["/Users/luca/IdeaProjects/Pokedex/Frontend/pokedex-app/src/components/APIs/TeamAPI.js"],"sourcesContent":["export const createTeam = async (team) => {\n  try {\n    const response = await fetch('http://localhost:8080/api/v1/teams', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(team),\n    });\n    console.log(response);\n  } catch (e) {\n    alert(e.message);\n  }\n};\n\nexport const findAllTeams = async () => {\n  try {\n    const response = await fetch('http://localhost:8080/api/v1/teams');\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n    const teams = await response.json();\n    setTeams(teams);\n  } catch (e) {\n    alert(e.message);\n  }\n};\n\nexport const updateTeam = async (team) => {\n  try {\n    const response = await fetch(\n      `http://localhost:8080/api/v1/teams/${team.id}`,\n      {\n        method: 'PUT',\n        headers: {\n          'Content-type': 'application/json',\n        },\n        body: JSON.stringify(team),\n      }\n    );\n    console.log(response);\n  } catch (e) {\n    alert(e.message);\n  }\n};\n\nexport const deleteTeamById = async (teamId) => {\n  try {\n    const response = await fetch(\n      `http://localhost:8080/api/v1/teams/${teamId}`,\n      {\n        method: 'DELETE',\n      }\n    );\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n    const newTeams = teams.filter((t) => t.id !== teamId);\n    setTeams(newTeams);\n  } catch (e) {\n    alert(e.message);\n  }\n};\n\nexport const deleteAllTeams = async () => {\n  try {\n    const response = await fetch(`http://localhost:8080/api/v1/teams`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error(`Error! status: ${response.status}`);\n    }\n    const newTeams = [];\n    setTeams(newTeams);\n  } catch (error) {\n    alert(e.message);\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC3B,CAAC,CAAC;IACFQ,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;EACvB,CAAC,CAAC,OAAOS,CAAC,EAAE;IACVC,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;EAClB;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;IAClE,IAAI,CAACD,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,kBAAiBd,QAAQ,CAACe,MAAO,EAAC,CAAC;IACtD;IACA,MAAMC,KAAK,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,EAAE;IACnCC,QAAQ,CAACF,KAAK,CAAC;EACjB,CAAC,CAAC,OAAOP,CAAC,EAAE;IACVC,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;EAClB;AACF,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAOpB,IAAI,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCF,IAAI,CAACqB,EAAG,EAAC,EAC/C;MACElB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC3B,CAAC,CACF;IACDQ,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;EACvB,CAAC,CAAC,OAAOS,CAAC,EAAE;IACVC,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;EAClB;AACF,CAAC;AAED,OAAO,MAAMU,cAAc,GAAG,MAAOC,MAAM,IAAK;EAC9C,IAAI;IACF,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCqB,MAAO,EAAC,EAC9C;MACEpB,MAAM,EAAE;IACV,CAAC,CACF;IACD,IAAI,CAACF,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,kBAAiBd,QAAQ,CAACe,MAAO,EAAC,CAAC;IACtD;IACA,MAAMQ,QAAQ,GAAGP,KAAK,CAACQ,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACL,EAAE,KAAKE,MAAM,CAAC;IACrDJ,QAAQ,CAACK,QAAQ,CAAC;EACpB,CAAC,CAAC,OAAOd,CAAC,EAAE;IACVC,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;EAClB;AACF,CAAC;AAED,OAAO,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmC,EAAE;MACjEC,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAI,CAACF,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,kBAAiBd,QAAQ,CAACe,MAAO,EAAC,CAAC;IACtD;IACA,MAAMQ,QAAQ,GAAG,EAAE;IACnBL,QAAQ,CAACK,QAAQ,CAAC;EACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdjB,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;EAClB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}